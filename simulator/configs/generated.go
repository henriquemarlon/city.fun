// Code generated by internal/config/generate.
// DO NOT EDIT.

package configs

import (
	"fmt"
	"github.com/spf13/viper"
	"os"
	"strings"
)

var ErrNotDefined = fmt.Errorf("variable not defined")

func init() {
	// Automatically bind environment variables.
	viper.AutomaticEnv()
}

const (
	DATABASE_COLLECTION   = "SIMULATOR_DATABASE_COLLECTION"
	DATABASE_NAME         = "SIMULATOR_DATABASE_NAME"
	DATABASE_URL          = "SIMULATOR_DATABASE_URL"
	HIVEMQ_MQTT_TOPIC     = "SIMULATOR_HIVEMQ_MQTT_TOPIC"
	HIVEMQ_PASSWORD       = "SIMULATOR_HIVEMQ_PASSWORD"
	HIVEMQ_URL            = "SIMULATOR_HIVEMQ_URL"
	HIVEMQ_USERNAME       = "SIMULATOR_HIVEMQ_USERNAME"
	LOG_COLOR             = "SIMULATOR_LOG_COLOR"
	LOG_LEVEL             = "SIMULATOR_LOG_LEVEL"
	MAX_STARTUP_TIME      = "SIMULATOR_MAX_STARTUP_TIME"
	PUSH_INTERVAL         = "SIMULATOR_PUSH_INTERVAL"
	SENSOR_SERVER_ADDRESS = "SIMULATOR_SENSOR_SERVER_ADDRESS"
	TELEMETRY_ADDRESS     = "SIMULATOR_TELEMETRY_ADDRESS"

	// File variants

	DATABASE_URL_FILE = "SIMULATOR_DATABASE_URL_FILE"

	HIVEMQ_PASSWORD_FILE = "SIMULATOR_HIVEMQ_PASSWORD_FILE"
	HIVEMQ_URL_FILE      = "SIMULATOR_HIVEMQ_URL_FILE"
	HIVEMQ_USERNAME_FILE = "SIMULATOR_HIVEMQ_USERNAME_FILE"
)

func SetDefaults() {
	// Set defaults based on the TOML definitions.

	// no default for SIMULATOR_DATABASE_COLLECTION

	// no default for SIMULATOR_DATABASE_NAME

	// no default for SIMULATOR_DATABASE_URL

	// no default for SIMULATOR_HIVEMQ_MQTT_TOPIC

	// no default for SIMULATOR_HIVEMQ_PASSWORD

	// no default for SIMULATOR_HIVEMQ_URL

	// no default for SIMULATOR_HIVEMQ_USERNAME

	viper.SetDefault(LOG_COLOR, "true")

	viper.SetDefault(LOG_LEVEL, "info")

	viper.SetDefault(MAX_STARTUP_TIME, "15")

	viper.SetDefault(PUSH_INTERVAL, "10")

	// no default for SIMULATOR_SENSOR_SERVER_ADDRESS

	// no default for SIMULATOR_TELEMETRY_ADDRESS

}

// SimulatorConfig holds configuration values for the simulator service.
type SimulatorConfig struct {

	// MongoDB collection for the database
	DatabaseCollection string `mapstructure:"SIMULATOR_DATABASE_COLLECTION"`

	// MongoDB name for the database
	DatabaseName string `mapstructure:"SIMULATOR_DATABASE_NAME"`

	// MongoDB URL for the database (supports file-based secrets via SIMULATOR_DATABASE_URL_FILE)
	DatabaseUrl URL `mapstructure:"SIMULATOR_DATABASE_URL"`

	// MQTT topic for publishing sensor data
	HivemqMqttTopic string `mapstructure:"SIMULATOR_HIVEMQ_MQTT_TOPIC"`

	// HiveMQ password for the broker (supports file-based secrets via SIMULATOR_HIVEMQ_PASSWORD_FILE)
	HivemqPassword RedactedString `mapstructure:"SIMULATOR_HIVEMQ_PASSWORD"`

	// HiveMQ URL for the broker (supports file-based secrets via SIMULATOR_HIVEMQ_URL_FILE)
	HivemqUrl string `mapstructure:"SIMULATOR_HIVEMQ_URL"`

	// HiveMQ username for the broker (supports file-based secrets via SIMULATOR_HIVEMQ_USERNAME_FILE)
	HivemqUsername string `mapstructure:"SIMULATOR_HIVEMQ_USERNAME"`

	// Log color for the service
	LogColor bool `mapstructure:"SIMULATOR_LOG_COLOR"`

	// Log level for the service
	LogLevel LogLevel `mapstructure:"SIMULATOR_LOG_LEVEL"`

	// Maximum startup time for the service
	MaxStartupTime Duration `mapstructure:"SIMULATOR_MAX_STARTUP_TIME"`

	// Push interval for the service
	PushInterval Duration `mapstructure:"SIMULATOR_PUSH_INTERVAL"`

	// Sensor server address for the service
	SensorServerAddress string `mapstructure:"SIMULATOR_SENSOR_SERVER_ADDRESS"`

	// Telemetry address for the service
	TelemetryAddress string `mapstructure:"SIMULATOR_TELEMETRY_ADDRESS"`
}

// LoadSimulatorConfig reads configuration from environment variables, a config file, and defaults.
// Priority: command line flags > environment variables > config file > defaults.
func LoadSimulatorConfig() (*SimulatorConfig, error) {
	SetDefaults()

	// Load config file if specified via --config flag.
	if cfgFile := viper.GetString("config"); cfgFile != "" {
		viper.SetConfigFile(cfgFile)
		if err := viper.ReadInConfig(); err != nil {
			return nil, fmt.Errorf("error reading config file: %w", err)
		}
	}

	var cfg SimulatorConfig
	var err error

	cfg.DatabaseCollection, err = GetDatabaseCollection()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_DATABASE_COLLECTION: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_DATABASE_COLLECTION is required for the simulator service: %w", err)
	}

	cfg.DatabaseName, err = GetDatabaseName()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_DATABASE_NAME: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_DATABASE_NAME is required for the simulator service: %w", err)
	}

	cfg.DatabaseUrl, err = GetDatabaseUrl()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_DATABASE_URL: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_DATABASE_URL is required for the simulator service: %w", err)
	}

	cfg.HivemqMqttTopic, err = GetHivemqMqttTopic()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_HIVEMQ_MQTT_TOPIC: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_HIVEMQ_MQTT_TOPIC is required for the simulator service: %w", err)
	}

	cfg.HivemqPassword, err = GetHivemqPassword()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_HIVEMQ_PASSWORD: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_HIVEMQ_PASSWORD is required for the simulator service: %w", err)
	}

	cfg.HivemqUrl, err = GetHivemqUrl()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_HIVEMQ_URL: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_HIVEMQ_URL is required for the simulator service: %w", err)
	}

	cfg.HivemqUsername, err = GetHivemqUsername()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_HIVEMQ_USERNAME: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_HIVEMQ_USERNAME is required for the simulator service: %w", err)
	}

	cfg.LogColor, err = GetLogColor()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_LOG_COLOR: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_LOG_COLOR is required for the simulator service: %w", err)
	}

	cfg.LogLevel, err = GetLogLevel()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_LOG_LEVEL: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_LOG_LEVEL is required for the simulator service: %w", err)
	}

	cfg.MaxStartupTime, err = GetMaxStartupTime()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_MAX_STARTUP_TIME: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_MAX_STARTUP_TIME is required for the simulator service: %w", err)
	}

	cfg.PushInterval, err = GetPushInterval()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_PUSH_INTERVAL: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_PUSH_INTERVAL is required for the simulator service: %w", err)
	}

	cfg.SensorServerAddress, err = GetSensorServerAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_SENSOR_SERVER_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_SENSOR_SERVER_ADDRESS is required for the simulator service: %w", err)
	}

	cfg.TelemetryAddress, err = GetTelemetryAddress()
	if err != nil && err != ErrNotDefined {
		return nil, fmt.Errorf("failed to get SIMULATOR_TELEMETRY_ADDRESS: %w", err)
	} else if err == ErrNotDefined {
		return nil, fmt.Errorf("SIMULATOR_TELEMETRY_ADDRESS is required for the simulator service: %w", err)
	}

	return &cfg, nil
}

// GetDatabaseCollection returns the value for the environment variable SIMULATOR_DATABASE_COLLECTION.
func GetDatabaseCollection() (string, error) {
	s := viper.GetString(DATABASE_COLLECTION)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", DATABASE_COLLECTION, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", DATABASE_COLLECTION, ErrNotDefined)
}

// GetDatabaseName returns the value for the environment variable SIMULATOR_DATABASE_NAME.
func GetDatabaseName() (string, error) {
	s := viper.GetString(DATABASE_NAME)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", DATABASE_NAME, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", DATABASE_NAME, ErrNotDefined)
}

// GetDatabaseUrl returns the value for the environment variable SIMULATOR_DATABASE_URL.
func GetDatabaseUrl() (URL, error) {
	s := viper.GetString(DATABASE_URL)
	if s == "" {
		filename := viper.GetString(DATABASE_URL_FILE)
		contents, err := os.ReadFile(filename)
		if err != nil {
			return notDefinedURL(), fmt.Errorf("failed to parse %s: %w", DATABASE_URL_FILE, err)
		}
		s = strings.TrimSpace(string(contents))
	}
	if s != "" {
		v, err := toURL(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", DATABASE_URL, err)
		}
		return v, nil
	}
	return notDefinedURL(), fmt.Errorf("%s: %w", DATABASE_URL, ErrNotDefined)
}

// GetHivemqMqttTopic returns the value for the environment variable SIMULATOR_HIVEMQ_MQTT_TOPIC.
func GetHivemqMqttTopic() (string, error) {
	s := viper.GetString(HIVEMQ_MQTT_TOPIC)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", HIVEMQ_MQTT_TOPIC, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", HIVEMQ_MQTT_TOPIC, ErrNotDefined)
}

// GetHivemqPassword returns the value for the environment variable SIMULATOR_HIVEMQ_PASSWORD.
func GetHivemqPassword() (RedactedString, error) {
	s := viper.GetString(HIVEMQ_PASSWORD)
	if s == "" {
		filename := viper.GetString(HIVEMQ_PASSWORD_FILE)
		contents, err := os.ReadFile(filename)
		if err != nil {
			return notDefinedRedactedString(), fmt.Errorf("failed to parse %s: %w", HIVEMQ_PASSWORD_FILE, err)
		}
		s = strings.TrimSpace(string(contents))
	}
	if s != "" {
		v, err := toRedactedString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", HIVEMQ_PASSWORD, err)
		}
		return v, nil
	}
	return notDefinedRedactedString(), fmt.Errorf("%s: %w", HIVEMQ_PASSWORD, ErrNotDefined)
}

// GetHivemqUrl returns the value for the environment variable SIMULATOR_HIVEMQ_URL.
func GetHivemqUrl() (string, error) {
	s := viper.GetString(HIVEMQ_URL)
	if s == "" {
		filename := viper.GetString(HIVEMQ_URL_FILE)
		contents, err := os.ReadFile(filename)
		if err != nil {
			return notDefinedstring(), fmt.Errorf("failed to parse %s: %w", HIVEMQ_URL_FILE, err)
		}
		s = strings.TrimSpace(string(contents))
	}
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", HIVEMQ_URL, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", HIVEMQ_URL, ErrNotDefined)
}

// GetHivemqUsername returns the value for the environment variable SIMULATOR_HIVEMQ_USERNAME.
func GetHivemqUsername() (string, error) {
	s := viper.GetString(HIVEMQ_USERNAME)
	if s == "" {
		filename := viper.GetString(HIVEMQ_USERNAME_FILE)
		contents, err := os.ReadFile(filename)
		if err != nil {
			return notDefinedstring(), fmt.Errorf("failed to parse %s: %w", HIVEMQ_USERNAME_FILE, err)
		}
		s = strings.TrimSpace(string(contents))
	}
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", HIVEMQ_USERNAME, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", HIVEMQ_USERNAME, ErrNotDefined)
}

// GetLogColor returns the value for the environment variable SIMULATOR_LOG_COLOR.
func GetLogColor() (bool, error) {
	s := viper.GetString(LOG_COLOR)
	if s != "" {
		v, err := toBool(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", LOG_COLOR, err)
		}
		return v, nil
	}
	return notDefinedbool(), fmt.Errorf("%s: %w", LOG_COLOR, ErrNotDefined)
}

// GetLogLevel returns the value for the environment variable SIMULATOR_LOG_LEVEL.
func GetLogLevel() (LogLevel, error) {
	s := viper.GetString(LOG_LEVEL)
	if s != "" {
		v, err := toLogLevel(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", LOG_LEVEL, err)
		}
		return v, nil
	}
	return notDefinedLogLevel(), fmt.Errorf("%s: %w", LOG_LEVEL, ErrNotDefined)
}

// GetMaxStartupTime returns the value for the environment variable SIMULATOR_MAX_STARTUP_TIME.
func GetMaxStartupTime() (Duration, error) {
	s := viper.GetString(MAX_STARTUP_TIME)
	if s != "" {
		v, err := toDuration(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", MAX_STARTUP_TIME, err)
		}
		return v, nil
	}
	return notDefinedDuration(), fmt.Errorf("%s: %w", MAX_STARTUP_TIME, ErrNotDefined)
}

// GetPushInterval returns the value for the environment variable SIMULATOR_PUSH_INTERVAL.
func GetPushInterval() (Duration, error) {
	s := viper.GetString(PUSH_INTERVAL)
	if s != "" {
		v, err := toDuration(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", PUSH_INTERVAL, err)
		}
		return v, nil
	}
	return notDefinedDuration(), fmt.Errorf("%s: %w", PUSH_INTERVAL, ErrNotDefined)
}

// GetSensorServerAddress returns the value for the environment variable SIMULATOR_SENSOR_SERVER_ADDRESS.
func GetSensorServerAddress() (string, error) {
	s := viper.GetString(SENSOR_SERVER_ADDRESS)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", SENSOR_SERVER_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", SENSOR_SERVER_ADDRESS, ErrNotDefined)
}

// GetTelemetryAddress returns the value for the environment variable SIMULATOR_TELEMETRY_ADDRESS.
func GetTelemetryAddress() (string, error) {
	s := viper.GetString(TELEMETRY_ADDRESS)
	if s != "" {
		v, err := toString(s)
		if err != nil {
			return v, fmt.Errorf("failed to parse %s: %w", TELEMETRY_ADDRESS, err)
		}
		return v, nil
	}
	return notDefinedstring(), fmt.Errorf("%s: %w", TELEMETRY_ADDRESS, ErrNotDefined)
}
